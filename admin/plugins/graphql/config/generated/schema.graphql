type Board {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  user: UsersPermissionsUser
  image: Image
}

type BoardAggregator {
  count: Int
}

type BoardConnection {
  values: [Board]
  groupBy: BoardGroupBy
  aggregate: BoardAggregator
}

type BoardConnection_id {
  key: ID
  connection: BoardConnection
}

type BoardConnectionCreatedAt {
  key: DateTime
  connection: BoardConnection
}

type BoardConnectionDescription {
  key: String
  connection: BoardConnection
}

type BoardConnectionImage {
  key: ID
  connection: BoardConnection
}

type BoardConnectionUpdatedAt {
  key: DateTime
  connection: BoardConnection
}

type BoardConnectionUser {
  key: ID
  connection: BoardConnection
}

type BoardGroupBy {
  _id: [BoardConnection_id]
  createdAt: [BoardConnectionCreatedAt]
  updatedAt: [BoardConnectionUpdatedAt]
  description: [BoardConnectionDescription]
  user: [BoardConnectionUser]
  image: [BoardConnectionImage]
}

input BoardInput {
  description: String
  user: ID
  image: ID
}

input createBoardInput {
  data: BoardInput
}

type createBoardPayload {
  board: Board
}

input createImageInput {
  data: ImageInput
}

type createImagePayload {
  image: Image
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteBoardInput {
  where: InputID
}

type deleteBoardPayload {
  board: Board
}

input deleteImageInput {
  where: InputID
}

type deleteImagePayload {
  image: Image
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

type Image {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  board: Board
  user: UsersPermissionsUser
  image: UploadFile
  tags: JSON
  description: String
}

type ImageAggregator {
  count: Int
}

type ImageConnection {
  values: [Image]
  groupBy: ImageGroupBy
  aggregate: ImageAggregator
}

type ImageConnection_id {
  key: ID
  connection: ImageConnection
}

type ImageConnectionBoard {
  key: ID
  connection: ImageConnection
}

type ImageConnectionCreatedAt {
  key: DateTime
  connection: ImageConnection
}

type ImageConnectionDescription {
  key: String
  connection: ImageConnection
}

type ImageConnectionImage {
  key: ID
  connection: ImageConnection
}

type ImageConnectionTags {
  key: JSON
  connection: ImageConnection
}

type ImageConnectionUpdatedAt {
  key: DateTime
  connection: ImageConnection
}

type ImageConnectionUser {
  key: ID
  connection: ImageConnection
}

type ImageGroupBy {
  _id: [ImageConnection_id]
  createdAt: [ImageConnectionCreatedAt]
  updatedAt: [ImageConnectionUpdatedAt]
  board: [ImageConnectionBoard]
  user: [ImageConnectionUser]
  image: [ImageConnectionImage]
  tags: [ImageConnectionTags]
  description: [ImageConnectionDescription]
}

input ImageInput {
  board: ID
  user: ID
  image: ID
  tags: JSON
  description: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Board | createBoardPayload | updateBoardPayload | deleteBoardPayload | BoardConnection | BoardAggregator | BoardGroupBy | BoardConnection_id | BoardConnectionCreatedAt | BoardConnectionUpdatedAt | BoardConnectionDescription | BoardConnectionUser | BoardConnectionImage | Image | createImagePayload | updateImagePayload | deleteImagePayload | ImageConnection | ImageAggregator | ImageGroupBy | ImageConnection_id | ImageConnectionCreatedAt | ImageConnectionUpdatedAt | ImageConnectionBoard | ImageConnectionUser | ImageConnectionImage | ImageConnectionTags | ImageConnectionDescription | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionAvatar

type Mutation {
  createBoard(input: createBoardInput): createBoardPayload
  updateBoard(input: updateBoardInput): updateBoardPayload
  deleteBoard(input: deleteBoardInput): deleteBoardPayload
  createImage(input: createImageInput): createImagePayload
  updateImage(input: updateImageInput): updateImagePayload
  deleteImage(input: deleteImageInput): deleteImagePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  board(id: ID!): Board
  boards(sort: String, limit: Int, start: Int, where: JSON): [Board]
  boardsConnection(sort: String, limit: Int, start: Int, where: JSON): BoardConnection
  image(id: ID!): Image
  images(sort: String, limit: Int, start: Int, where: JSON): [Image]
  imagesConnection(sort: String, limit: Int, start: Int, where: JSON): ImageConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateBoardInput {
  where: InputID
  data: BoardInput
}

type updateBoardPayload {
  board: Board
}

input updateImageInput {
  where: InputID
  data: ImageInput
}

type updateImagePayload {
  image: Image
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  avatar: ID
  boards: [ID]
  images: [ID]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  avatar: UploadFile
  boards(sort: String, limit: Int, start: Int, where: JSON): [Board]
  images(sort: String, limit: Int, start: Int, where: JSON): [Image]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionAvatar {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  avatar: [UsersPermissionsUserConnectionAvatar]
}
